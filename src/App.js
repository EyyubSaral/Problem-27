import { Switch } from "@headlessui/react";
import { useEffect, useRef, useState } from "react";

// AÅŸaÄŸÄ±daki Toggle bileÅŸeni aÃ§/kapat anahtarÄ± (switch) olarak Ã§alÄ±ÅŸmaktadÄ±r.
// Ancak ÅŸu anda bazÄ± eksiklikler ve iyileÅŸtirilmesi gereken noktalar bulunmaktadÄ±r.
// AmacÄ±nÄ±z useRef kullanarak bileÅŸeni daha saÄŸlam ve kontrollÃ¼ hale getirmektir.

// âœ… useRef kullanarak bileÅŸenin Ã¶nceki durumunu saklayÄ±n ve console.log ile her deÄŸiÅŸimde eski ve yeni deÄŸeri yazdÄ±rÄ±n.
// âœ… Toggle deÄŸiÅŸimlerini takip etmek iÃ§in useRef kullanarak bir sayaÃ§ oluÅŸturun (kaÃ§ kere aÃ§Ä±lÄ±p kapandÄ±ÄŸÄ±nÄ± takip edin).
// âœ… useRef ile bileÅŸene odaklanmayÄ± saÄŸlayÄ±n. Toggle bileÅŸeni ilk yÃ¼klendiÄŸinde otomatik olarak odaklansÄ±n.
// âœ… Toggle durumunun son halini kaydetmek iÃ§in bir useRef deÄŸiÅŸkeni oluÅŸturun ve bileÅŸen kapandÄ±ÄŸÄ±nda son durumu localStorageâ€™a kaydedin.
// âœ… useRef ile bir DOM referansÄ± oluÅŸturarak, toggle bileÅŸenine her tÄ±klandÄ±ÄŸÄ±nda hafifÃ§e bÃ¼yÃ¼mesini saÄŸlayÄ±n (Ã¶rn: scale animasyonu).

// Bonus:
// âœ¨ Toggle aÃ§Ä±k/kapalÄ± durumunda bileÅŸenin geniÅŸliÄŸini deÄŸiÅŸtirin:
//    - AÃ§Ä±kken w-16, kapalÄ±yken w-11 olacak ÅŸekilde dinamik geniÅŸlik ayarlayÄ±n.
// âœ¨ Toggle deÄŸiÅŸtiÄŸinde ikon deÄŸiÅŸimi ekleyin:
//    - AÃ§Ä±kken bir "gÃ¼neÅŸ" ikonu (ðŸŒž), kapalÄ±yken bir "ay" ikonu (ðŸŒ™) gÃ¶sterin.
// âœ¨ Butona basÄ±ldÄ±ÄŸÄ±nda kÃ¼Ã§Ã¼k bir vibrate efekti ekleyin (animate-wiggle gibi Ã¶zel Tailwind animasyonu oluÅŸturun).
// âœ¨ Switch'in durumuna gÃ¶re arkaplanÄ±na blur ve backdrop-filter efekti ekleyerek cam efekti verin (backdrop-blur-md gibi).
// âœ¨ Toggle butonuna "arka plan deÄŸiÅŸimi" efekti ekleyin:
//    - Buton kapalÄ±ysa mat renkler, aÃ§Ä±k olduÄŸunda gradient bir arka plan oluÅŸturun.
// âœ¨ KullanÄ±cÄ±nÄ±n Tab tuÅŸuyla navigasyon yapabilmesini saÄŸlamak iÃ§in Tailwindâ€™in focus-visible Ã¶zelliklerini kullanÄ±n.
// âœ¨ peer Ã¶zelliÄŸini kullanarak toggle aÃ§Ä±kken yanÄ±nda ekstra bir bilgi gÃ¶sterecek ÅŸekilde geliÅŸtirin (Ã¶rn: "Premium aktif")

export default function Toggle() {
  const switchRef = useRef(null); // DOM referansÄ± iÃ§in.
  const previousStateRef = useRef(null); // Ã–nceki durumu saklamak iÃ§in.
  const toggleRef = useRef(
    JSON.parse(localStorage.getItem("toggleState")) || true
  ); // localStorage'dan okuma.
  const [enabled, setEnabled] = useState(toggleRef.current); // BileÅŸenin anlÄ±k durumu.
  const times = useRef(0); // KaÃ§ kez tÄ±klandÄ±ÄŸÄ±nÄ± izlemek iÃ§in.

  useEffect(() => {
    switchRef.current.focus(); // BileÅŸen yÃ¼klendiÄŸinde odaÄŸÄ± saÄŸlama.
  }, []);

  useEffect(() => {
    localStorage.setItem("toggleState", JSON.stringify(enabled)); // Durumu localStorage'a kaydetme.
  }, [enabled]);

  const handleToggle = () => {
    previousStateRef.current = toggleRef.current; // Ã–nceki durumu saklama.
    toggleRef.current = !toggleRef.current; // Yeni durumu gÃ¼ncelleme.
    setEnabled(toggleRef.current);

    console.log("Ã–nceki Durum:", previousStateRef.current);
    console.log("Yeni Durum:", toggleRef.current);

    times.current = times.current + 1; // TÄ±klanma sayÄ±sÄ±nÄ± artÄ±rma.
    console.log(`${times.current} Kez Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±`);

    // Hafif bÃ¼yÃ¼tme iÃ§in animasyon tetiklenebilir.
    if (switchRef.current) {
      switchRef.current.style.transform = "scale(1.1)";
      setTimeout(() => {
        switchRef.current.style.transform = "scale(1)";
      }, 200);
    }
  };

  return (
    <div className="p-8 flex justify-center">
      <Switch.Group as="div" className="flex items-center">
        <Switch
          checked={enabled}
          onChange={handleToggle}
          className={classNames(
            enabled ? "bg-indigo-600" : "bg-gray-200",
            "relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-offset-2"
          )}
          ref={switchRef}
        >
          <span
            aria-hidden="true"
            className={classNames(
              enabled ? "translate-x-5" : "translate-x-0",
              "pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out"
            )}
          />
        </Switch>
        <Switch.Label as="span" className="ml-3 text-sm">
          <span className="font-medium text-gray-900">YÄ±llÄ±k fatura</span>{" "}
          <span className="text-gray-500">(%10 Tasarruf Edin)</span>
        </Switch.Label>
      </Switch.Group>
    </div>
  );
}

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}
